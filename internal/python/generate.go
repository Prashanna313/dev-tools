package python

import (
	"fmt"
	"os"
	"path/filepath"
	"text/template"
)

// Template options
const (
	FlaskTemplate  = "flask"
	DjangoTemplate = "django"
	CLITemplate    = "cli"
)

// templates map to describe available templates
var templates = map[string]string{
	FlaskTemplate:  "Flask Web Application",
	DjangoTemplate: "Django Web Application",
	CLITemplate:    "Command Line Interface",
}

// AvailableTemplates returns a map of template identifiers and descriptions
func AvailableTemplates() map[string]string {
	return templates
}

// IsValidTemplate checks if the provided template type is valid
func IsValidTemplate(templateType string) bool {
	_, exists := templates[templateType]
	return exists
}

// GenerateProject generates the project based on the template type
func GenerateProject(name, templateType string) error {
	projectDir := filepath.Join(".", name)
	if err := os.MkdirAll(projectDir, os.ModePerm); err != nil {
		return fmt.Errorf("could not create project directory: %v", err)
	}

	switch templateType {
	case FlaskTemplate:
		return generateFlaskProject(projectDir)
	case DjangoTemplate:
		return generateDjangoProject(projectDir)
	case CLITemplate:
		return generateCLIProject(projectDir)
	default:
		return fmt.Errorf("unsupported template type: %s", templateType)
	}
}

// generateFlaskProject creates a basic Flask app structure
func generateFlaskProject(dir string) error {
	structure := map[string]string{
		"app.py":               flaskAppTemplate,
		"requirements.txt":     "Flask\n",
		"templates/index.html": "<html><body><h1>Hello, Flask!</h1></body></html>",
		"static/style.css":     "body { font-family: Arial; }",
	}

	return createFiles(dir, structure)
}

// generateDjangoProject creates a basic Django project structure
func generateDjangoProject(dir string) error {
	structure := map[string]string{
		"manage.py":               djangoManageTemplate,
		"requirements.txt":        "Django\n",
		"projectname/settings.py": djangoSettingsTemplate,
		"projectname/urls.py":     djangoUrlsTemplate,
		"projectname/wsgi.py":     djangoWsgiTemplate,
		"projectname/asgi.py":     djangoAsgiTemplate,
	}

	return createFiles(dir, structure)
}

// generateCLIProject creates a basic CLI app structure
func generateCLIProject(dir string) error {
	structure := map[string]string{
		"main.py":          cliMainTemplate,
		"requirements.txt": "",
	}

	return createFiles(dir, structure)
}

// createFiles creates files from a map of paths and content
func createFiles(root string, structure map[string]string) error {
	for path, content := range structure {
		fullPath := filepath.Join(root, path)
		dir := filepath.Dir(fullPath)
		if err := os.MkdirAll(dir, os.ModePerm); err != nil {
			return fmt.Errorf("could not create directory %s: %v", dir, err)
		}

		file, err := os.Create(fullPath)
		if err != nil {
			return fmt.Errorf("could not create file %s: %v", fullPath, err)
		}
		defer file.Close()

		tmpl, err := template.New(filepath.Base(fullPath)).Parse(content)
		if err != nil {
			return fmt.Errorf("could not parse template for file %s: %v", fullPath, err)
		}

		if err := tmpl.Execute(file, nil); err != nil {
			return fmt.Errorf("could not write to file %s: %v", fullPath, err)
		}
	}

	return nil
}

// Template content

const flaskAppTemplate = `
from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
`

const djangoManageTemplate = `
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "projectname.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
`

const djangoSettingsTemplate = `
"""
Django settings for projectname project.

Generated by 'django-admin startproject' using Django <version>.

For more information on this file, see
https://docs.djangoproject.com/en/<version>/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/<version>/ref/settings/
"""

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'projectname.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'projectname.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'
`

const djangoUrlsTemplate = `
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]
`

const djangoWsgiTemplate = `
"""
WSGI config for projectname project.

It exposes the WSGI callable as a module-level variable named application.

For more information on this file, see
https://docs.djangoproject.com/en/<version>/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projectname.settings')

application = get_wsgi_application()
`

const djangoAsgiTemplate = `
"""
ASGI config for projectname project.

It exposes the ASGI callable as a module-level variable named application.

For more information on this file, see
https://docs.djangoproject.com/en/<version>/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projectname.settings')

application = get_asgi_application()
`

const cliMainTemplate = `
import click

@click.command()
def main():
    click.echo("Hello, CLI World!")

if __name__ == "__main__":
    main()
`
